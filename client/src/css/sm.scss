@use "sass:math";
@use "sass:color";
@use "sass:list";
@use "sass:string";
@import "./variables.scss";
@import "./zone-colors.scss";

.unrest-floating-actions.-left {
  .ur-popper.popdown {
    max-height: 600px;
    overflow-y: auto;
  }
}

.edit-room .modal-content {
  min-width: 900px;
  padding-top: 3rem; /* for toolbar */
  position: relative;
  .modal-body {
    height: 100%;
    overflow: auto;
    width: 100%;
  }
  .ur-toolbar__row:last-child {
    display:none;
  }
  .ur-toolbar:hover .ur-toolbar__row:last-child {
    display: flex;
  }
}

.sm-room-box {
  background-size: cover;
  &.-mode-split, &.-mode-overlap, &.-mode-geometry, &.-mode-item, &.-mode-block, &.-mode-plm, &.-mode-link {
    position: relative;
  }
  canvas {
    display:none;
    width: 100%;
    height: 100%;
  }
  .-tool-edit_room &:hover {
    outline: 2px solid white;
  }
  &__drag-bounds {
    @apply absolute border-2 border-green-500;
    pointer-events: none;
    &.-ctrl {
      @apply border-yellow-400;
    }
  }
  .sm-cre-hex {
    pointer-events: none;
  }
  &__override {
    @apply absolute cursor-pointer;
    outline: 2px solid white;
  }
  &.-highlight {
    outline: 4px solid red;
  }
  ._bts-extra {
    @apply absolute inset-0;
    pointer-events: none;
  }
}

.osd-html__overlay .sm-item,
.osd-html__overlay .sm-link {
  @apply absolute;
  &:before {
    @apply bg-black;
    outline: 1px solid white;
  }
  &:before, ._before {
    @apply absolute;
    transition: inset 0.25s;
  }
  @mixin item-zoom($zoom, $ratio) {
    .-zoom-#{$zoom} & {
      .ur-popper {
        padding-top: $ratio * 100%;
      }
      &:before, ._before {
        inset: $ratio * -100%;
      }
    }
  }
  @include item-zoom(-4, 16);
  @include item-zoom(-3, 12);
  @include item-zoom(-2, 8);
  @include item-zoom(-1, 6);
  @include item-zoom(0, 4);
  @include item-zoom(1, 2);
  @include item-zoom(2, 1);
}

.sm-zone-box {
  &__move:before {
    content: "";
    background: rgba(255, 128, 128, 0.5);
    inset: 0;
    outline: 1px solid gray;
    position: absolute;
  @mixin zone-zoom($zoom, $ratio) {
    .-zoom-#{$zoom} & {
      inset: $ratio * -5%;
    }
  }
  @include zone-zoom(-4, 16);
  @include zone-zoom(-3, 12);
  @include zone-zoom(-2, 8);
  @include zone-zoom(-1, 6);
  }
}

.sm-zone-box, .sm-room-box {
  @apply absolute;
  .unrest-draggable {
    @apply absolute cursor-pointer inset-0;
    background-size: 100% auto;
  }
}

.-tool-move_zone {
  .sm-room-box {
    display: none;
  }
}

.sm-elevator, .sm-item, .sm-block, .sm-cre-hex, .sm-ui, .sm-link {
  @apply relative inline-block;
  height: 1em;
  width: 1em;
  &:before, ._before {
    @apply absolute inset-0;
    background-size: 100% auto;
    content: "";
    image-rendering: pixelated;
  }
  &.-has-not {
    opacity: 0.75;
    filter: grayscale(1);
  }
}

.sm-elevator {
  @each $z in brinstar, tourian, maridia, norfair, {
    &.-#{$z}:before {
      background-image: url("/static/sm/elevator__#{$z}.png");
    }
  }
  .btn &:before {
    inset: -50%;
  }
}

.sm-elevator.-line:before {
  background: linear-gradient(to left, transparent 25%, #ccc 25%, #ccc 75%, transparent 75%);
}

$cre-hex: respawn block exit;

.sm-cre-hex {
  &:before {
    background-image: url("/static/sm/cre-hex.png");
  }
  @for $i from 0 to length($cre-hex) {
    $name: nth($cre-hex, $i + 1);
    &.-#{"" + $name}:before {
      background-position: 0 $i * -100%;
    }
  }
}

.sm-block {
  @for $i from 0 to length($block) {
    $name: nth($block, $i + 1);
    &.-#{"" + $name}:before {
      background-image: url("/static/sm/block.png");
      background-position: 0 $i * -100%;
    }
  }
}

@each $template-name, $sprites in $template_sprites {
  $y_offset: 0;
  @each $tuple in $sprites {
    $name: list.nth($tuple, 1);
    $width: list.nth($tuple, 2);
    $height: list.nth($tuple, 3);
    .sm-block.-#{$name} {
      background-size: cover;
      background-image: url("/static/sm/icons/templates/#{$name}.png");
      height: unset; /* determined by padding in &:before */
      width: math.div($width, 16) * 1em;
      .ur-toolbar__row .btn & {
        width: math.div($width, $height) * 1em;
      }
      &:before {
        /* This is a css hack to force the aspect ratio */
        content: "";
        display: block;
        position: relative;
        padding-top: math.div($height, $width) * 100%;
      }
    }
  }
}

.sm-block {
  @for $i from 0 to length($block-alt) {
    $name: nth($block-alt, $i + 1);
    &.-#{"" + $name}:before {
      background-image: url("/static/sm/block-alt.png");
      background-position: 0 $i * -100%;
    }
  }
}

.sm-ui {
  &:before {
    background-image: url("/static/sm/ui.png");
  }
  &.-active:before {
    background-image: url("/static/sm/ui-active.png");
  }
  @for $i from 0 to length($ui_items) {
    $name: nth($ui_items, $i + 1);
    &.-#{"" + $name}:before {
      background-position: 0 $i * -100%;
    }
  }
}

.sm-item {
  &:before {
    background-image: url("/static/sm/items.png");
  }
  @for $i from 0 to length($items) {
    $name: nth($items, $i + 1);
    &.-#{"" + $name}:before {
      background-position: 0 $i * -100%;
    }
    &.-alt:before {
      background-image: url("/static/sm/items-alt.png");
    }
  }
  &.-confused:before {
    background-image: url("/static/sm/confused.png");
    background-position: unset;
  }
}
.sm-item {
  @for $i from 0 to length($custom-items) {
    $name: nth($custom-items, $i + 1);
    &.-#{"" + $name}:before {
      background-image: url("/static/sm/custom-items.png");
      background-position: 0 $i * -100%;
    }
    &.-alt:before {
      background-image: url("/static/sm/custom-items-alt.png");
    }
  }
}

$ascent-items: weapons-tank shinespark boost-ball;
.sm-item {
  @for $i from 0 to length($ascent-items) {
    $name: nth($ascent-items, $i + 1);
    &.-#{"" + $name}:before {
      background-image: url("/static/sm/ascent-items.png");
      background-position: 0 $i * -100%;
    }
  }
}

.sm-link {
  @apply flex items-center justify-center;
  &:before {
    display: none;
  }
  ._before {
    @apply absolute;
    background-size: contain;
    outline: 0;
  }
  @each $name, $color in $link-colors {
    &.-#{$name}, &.-#{$name} ._before {
      background-color: string.unquote($color);
    }
  }
  &.-yellow, &.-green, &.-cyan, &.-orange, &.-white {
    color: black;
  }
}

@each $name, $color in $link-colors {
  .fa.-#{$name} {
    color: string.unquote($color);
  }
}

.osd-html__overlay {
  .sm-link {
    /* text is displayed using background image */
    @apply absolute;
    color: transparent;
  }
}

.sm-room-svg {
  @apply overflow-visible relative;
  /* pointer-events: none; */
  rect, path {
    vector-effect: non-scaling-stroke;
  }
  path {
    fill: transparent;
    stroke: transparent;
    &.-inner {
      display: none;
      pointer-events: none;
    }
    &.-outer {
      stroke-width: 3px;
      transition: 0.25s;
      &:hover {
        stroke-width: 6px;
        stroke: #ccc;
        fill: transparent;
      }
      &.-highlight, &.-highlight:hover {
        fill: theme('colors.red.800');
        stroke: theme('colors.red.400');
      }
    }
  }
  line.run {
    stroke: theme('colors.green.500');
    stroke-width: 0.0625;
    pointer-events: none;
    marker-end: url(#arrowhead);
    &.-highlight {
      stroke: theme('colors.red.800');
      stroke-width: 0.25;
      marker-end: url(#red-arrowhead);
    }
  }
}

.sm-elevator-svg {
  @apply absolute left-0 overflow-visible top-0;
  line.elevator {
    stroke: #ccc;
    stroke-linecap: round;
    stroke-width: 0.25;
    pointer-events: none;
  }
}

.-tool-move_room,
.-tool-edit_room,
.-tool-rezone {
  .sm-room-svg {
    display:none;
  }
}

.-layer-rooms .sm-room-svg path.-outer {
  stroke: #0f0;
  @each $name, $color in $zone-colors {
    &.-zone-#{$name} {
      stroke: $color;
      &:hover {
        stroke: #ccc;
      }
    }
  }
}

.app-body.-zoom--3, .app-body.-zoom--4 {
  .sm-room-svg path.-outer {
    @each $name, $color in $zone-colors {
      &.-zone-#{$name} {
        $color_a: color.change($color,$alpha: 0.85);
        fill: color.adjust($color_a, $blackness: 25%);
      }
    }
  }
}

.app-body.-zoom--3, .app-body.-zoom--4 {
    &.-world-grand-prix, &.-world-grand-prix-2,
    .sm-room-svg path.-outer {
	fill: none !important;
    }
}


/* everything below here is from the old editor and will eventually be removed */
.sm-room, .sm-map, .sm-chozo, .sm-door {
  background-size: 100% auto;
  display: inline-block;
  height: 1em;
  image-rendering: pixelated;
  width: 1em;
}

.sm-chozo {
  background-image: url("/static/sm/chozo.png");
}

.sm-map {
  $icons: save map energy missile boss elevator;
  background-image: url("/static/sm/map_icons.png");
  background-size: auto 100%;
  @for $i from 0 to length($icons) {
    $name: nth($icons, $i + 1);
    &.-#{"" + $name} {
      background-position: $i * -100% 0;
    }
  }
  &.-ship {
    background-position: right 0;
    width: 2em;
  }
}

.sm-door {
  $colors: green blue orange red purple brown;
  @for $i from 0 to length($colors) {
    $name: nth($colors, $i + 1);
    &.-#{"" + $name} {
      background: $name;
    }
  }
  &.-eye {
    background: gray;
  }
  &.-elevator {
    background: #d8c800;
    border-radius: 100%;
    transform: scaleY(0.3);
  }
}


@mixin room($name, $color) {
  &.-#{"" + $name} {
    background: $color;
    fill: $color;
    .map-editor.-has-selected-room &:not(.-selected) {
      opacity: 0.5;
      background: linear-gradient(45deg, transparent 25%, $color 25%, $color 50%, transparent 50%, transparent 75%, $color 75%, $color 100%);
    }
  }
}

.sm-room {
  border: #a0f8f8 0.125em solid;
  stroke: #a0f8f8;
  stroke-width: 0.0001;
  @each $name, $color in $zone-colors {
    @include room($name, $color);
  }
  &.-void {
    border: 0;
  }
  &.-elevator {
    background: url("/static/sm/elevator.png");
    border: 0;
    background-size: 100% auto;
    opacity: 0.5;
    &.-selected {
      opacity: 1;
    }
  }
  &.-absolute {
    position: absolute;
  }
  &.-selected, &.-draft {
    border-style: dashed;
    border-width: 0.5em;
  }
  &.-draft {
    border-color: #ff8;
  }
  &.br0 {
    border-right: 0;
  }
  &.bl0 {
    border-left: 0;
  }
  &.bt0 {
    border-top: 0;
  }
  &.bb0 {
    border-bottom: 0;
  }
  &.-style-mini {
    background: transparent;
  }
}

.sm-config-popper {
  @apply border flex flex-col gap-2 p-2;
  background: var(--bg);
  white-space: pre;
  label {
    @apply block;
  }
  &__title {
    @apply font-bold;
  }
}

.run-list {
  @apply flex flex-col overflow-hidden;
  &__scroll {
    overflow-y: auto;
  }
}

.sm-room-box.-mode-geometry {
  @apply m-2;
}

.geometry-editor {
  @apply absolute inset-0;
  z-index: 1;
  &__dot {
    @apply absolute bg-white cursor-pointer h-3 rounded-full w-3;
    transform: translate(-50%, -50%);
    &:hover {
      @apply border-2 w-5 h-5;
    }
    &.-minor {
      @apply bg-gray-500;
    }
  }
  svg {
    @apply absolute inset-0;
  }
  path {
    stroke-width: 0.01;
    fill: none;
  }
  &__error {
    @apply bg-red-800 fixed flex items-center justify-center p-4;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
  }
}

#edit-room__actions {
  @apply absolute bottom-0 left-0 p-1;
}
